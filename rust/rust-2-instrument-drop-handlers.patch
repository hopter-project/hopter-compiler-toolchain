From 92af1d9ef4e58fe12b93be33ee221d7f9ae00e44 Mon Sep 17 00:00:00 2001
From: Zhiyao Ma <zhiyao.ma.98@gmail.com>
Date: Thu, 14 Nov 2024 11:16:18 -0500
Subject: [PATCH] Instrument drop handlers.

---
 compiler/rustc_mir_transform/src/shim.rs | 329 ++++++++++++++++++++++-
 1 file changed, 324 insertions(+), 5 deletions(-)

diff --git a/compiler/rustc_mir_transform/src/shim.rs b/compiler/rustc_mir_transform/src/shim.rs
index 6835a39cf36..6831d54f655 100644
--- a/compiler/rustc_mir_transform/src/shim.rs
+++ b/compiler/rustc_mir_transform/src/shim.rs
@@ -1,3 +1,4 @@
+use interpret::Scalar;
 use rustc_hir as hir;
 use rustc_hir::def_id::DefId;
 use rustc_hir::lang_items::LangItem;
@@ -211,6 +212,277 @@ fn local_decls_for_sig<'tcx>(
         .collect()
 }
 
+fn load_local_value_from_addr<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    block: BasicBlock,
+    span: Span,
+    addr: u32,
+    val_type: Ty<'tcx>,
+) -> Place<'tcx> {
+    let source_info = SourceInfo::outermost(span);
+
+    let addr_type = Ty::new_mut_ptr(tcx, val_type);
+    let addr_local = body.local_decls.push(LocalDecl::new(addr_type, span));
+
+    let addr_constant = ConstOperand {
+        span,
+        user_ty: None,
+        const_: Const::Val(ConstValue::Scalar(Scalar::from_u32(addr)), tcx.types.u32),
+    };
+    let assign_address_stmt = Statement {
+        source_info,
+        kind: StatementKind::Assign(Box::new((
+            Place::from(addr_local),
+            Rvalue::Cast(
+                CastKind::PointerWithExposedProvenance,
+                Operand::Constant(Box::new(addr_constant)),
+                addr_type,
+            ),
+        ))),
+    };
+
+    body[block].statements.push(assign_address_stmt);
+
+    let deref_place = tcx.mk_place_deref(Place::from(addr_local));
+
+    let value_local = body.local_decls.push(LocalDecl::new(val_type, span));
+    let value_place = Place::from(value_local);
+
+    let load_rvalue = Rvalue::Use(Operand::Copy(deref_place));
+    body[block].statements.push(Statement {
+        source_info,
+        kind: StatementKind::Assign(Box::new((value_place, load_rvalue))),
+    });
+
+    value_place
+}
+
+fn store_local_value_from_addr<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    block: BasicBlock,
+    span: Span,
+    addr: u32,
+    val_type: Ty<'tcx>,
+    val: Rvalue<'tcx>,
+) {
+    let source_info = SourceInfo::outermost(span);
+
+    let addr_type = Ty::new_mut_ptr(tcx, val_type);
+    let addr_local = body.local_decls.push(LocalDecl::new(addr_type, span));
+
+    let addr_constant = ConstOperand {
+        span,
+        user_ty: None,
+        const_: Const::Val(ConstValue::Scalar(Scalar::from_u32(addr)), tcx.types.u32),
+    };
+    let assign_address_stmt = Statement {
+        source_info,
+        kind: StatementKind::Assign(Box::new((
+            Place::from(addr_local),
+            Rvalue::Cast(
+                CastKind::PointerWithExposedProvenance,
+                Operand::Constant(Box::new(addr_constant)),
+                addr_type,
+            ),
+        ))),
+    };
+
+    body[block].statements.push(assign_address_stmt);
+
+    let deref_place = tcx.mk_place_deref(Place::from(addr_local));
+
+    body[block]
+        .statements
+        .push(Statement { source_info, kind: StatementKind::Assign(Box::new((deref_place, val))) });
+}
+
+/// ```plain
+/// set_drop_block: {
+///     _2 = const 536870916_usize as *mut u32 (PointerWithExposedProvenance);
+///     _1 = copy (*_2);
+///     (*_2) = const 1_u32;
+///     goto -> drop_start_block
+/// }
+/// ```
+fn init_set_drop_block<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    set_drop_block: BasicBlock,
+    span: Span,
+) -> Place<'tcx> {
+    let source_info = SourceInfo::outermost(span);
+
+    let original_value_place =
+        load_local_value_from_addr(tcx, body, set_drop_block, span, 0x2000_0004, tcx.types.u32);
+
+    let updated_value_place =
+        load_local_value_from_addr(tcx, body, set_drop_block, span, 0x2000_0004, tcx.types.u32);
+
+    let constant_one = Rvalue::Use(Operand::Constant(Box::new(ConstOperand {
+        span,
+        user_ty: None,
+        const_: Const::Val(ConstValue::Scalar(Scalar::from_u32(1)), tcx.types.u32),
+    })));
+
+    body[set_drop_block].statements.push(Statement {
+        source_info,
+        kind: StatementKind::Assign(Box::new((updated_value_place, constant_one))),
+    });
+
+    store_local_value_from_addr(
+        tcx,
+        body,
+        set_drop_block,
+        span,
+        0x2000_0004,
+        tcx.types.u32,
+        Rvalue::Use(Operand::Copy(updated_value_place)),
+    );
+
+    return original_value_place;
+}
+
+/// ```plain
+/// check_drop_block: {
+///     switchInt(move _1) -> [0: check_unwind_block, otherwise: return_block];
+/// }
+/// ```
+fn init_check_drop_block<'tcx>(
+    body: &mut Body<'tcx>,
+    in_drop_flag_place: Place<'tcx>,
+    check_drop_block: BasicBlock,
+    check_unwind_block: BasicBlock,
+    return_block: BasicBlock,
+    span: Span,
+) {
+    let source_info = SourceInfo::outermost(span);
+
+    body[check_drop_block].terminator = Some(Terminator {
+        source_info,
+        kind: TerminatorKind::SwitchInt {
+            discr: Operand::Copy(in_drop_flag_place),
+            targets: SwitchTargets::new(iter::once((0, check_unwind_block)), return_block),
+        },
+    });
+}
+
+/// ```plain
+/// check_unwind_block: {
+///     _5 = const 536870920_usize as *mut u32 (PointerWithExposedProvenance);
+///     _4 = copy (*_5);
+///     switchInt(move _4) -> [0: reset_drop_block, otherwise: call_unwind_block];
+/// }
+/// ```
+fn init_check_unwind_block<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    check_unwind_block: BasicBlock,
+    call_unwind_block: BasicBlock,
+    reset_drop_block: BasicBlock,
+    span: Span,
+) {
+    let source_info = SourceInfo::outermost(span);
+
+    let value_place =
+        load_local_value_from_addr(tcx, body, check_unwind_block, span, 0x2000_0008, tcx.types.u32);
+
+    body[check_unwind_block].terminator = Some(Terminator {
+        source_info,
+        kind: TerminatorKind::SwitchInt {
+            discr: Operand::Copy(value_place),
+            targets: SwitchTargets::new(iter::once((0, reset_drop_block)), call_unwind_block),
+        },
+    });
+}
+
+/// ```plain
+/// call_unwind_block: {
+///     _6 = const 0x0002_000c_usize as *fn();
+///     _7 = (*_6);
+///     (*_7)() -> unwind continue;
+/// }
+/// ```
+fn init_call_unwind_block<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    call_unwind_block: BasicBlock,
+    span: Span,
+) {
+    use rustc_middle::ty::inherent::*;
+
+    let source_info = SourceInfo::outermost(span);
+
+    let fn_ptr_type = Ty::new_fn_ptr(
+        tcx,
+        ty::Binder::dummy(tcx.mk_fn_sig(
+            [],
+            Ty::new_unit(tcx), // TODO: try new_diverging_default()
+            false,
+            hir::Safety::Safe,
+            rustc_target::spec::abi::Abi::C { unwind: true }, // TODO: try RustCold
+        )),
+    );
+
+    let fn_ptr_place =
+        load_local_value_from_addr(tcx, body, call_unwind_block, span, 0x2000_000c, fn_ptr_type);
+
+    let ret_val_local = body.local_decls.push(LocalDecl::new(tcx.types.unit, span));
+
+    body[call_unwind_block].terminator = Some(Terminator {
+        source_info,
+        kind: TerminatorKind::Call {
+            func: Operand::Copy(fn_ptr_place),
+            args: Box::new([]),
+            destination: Place::from(ret_val_local),
+            target: None,
+            unwind: UnwindAction::Continue,
+            call_source: CallSource::Misc,
+            fn_span: DUMMY_SP,
+        },
+    });
+}
+
+/// ```plain
+/// reset_drop_block: {
+///     (*_2) = const 0_u32;
+///     goto -> return_block;
+/// }
+/// ```
+fn init_reset_drop_block<'tcx>(
+    tcx: TyCtxt<'tcx>,
+    body: &mut Body<'tcx>,
+    reset_drop_block: BasicBlock,
+    span: Span,
+) {
+    let source_info = SourceInfo::outermost(span);
+
+    let value_place =
+        load_local_value_from_addr(tcx, body, reset_drop_block, span, 0x2000_0004, tcx.types.u32);
+
+    let constant_zero = Rvalue::Use(Operand::Constant(Box::new(ConstOperand {
+        span,
+        user_ty: None,
+        const_: Const::Val(ConstValue::Scalar(Scalar::from_u32(0)), tcx.types.u32),
+    })));
+
+    body[reset_drop_block].statements.push(Statement {
+        source_info,
+        kind: StatementKind::Assign(Box::new((value_place, constant_zero))),
+    });
+
+    store_local_value_from_addr(
+        tcx,
+        body,
+        reset_drop_block,
+        span,
+        0x2000_0004,
+        tcx.types.u32,
+        Rvalue::Use(Operand::Copy(value_place)),
+    );
+}
+
 fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>) -> Body<'tcx> {
     debug!("build_drop_shim(def_id={:?}, ty={:?})", def_id, ty);
 
@@ -227,8 +499,16 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)
 
     let source_info = SourceInfo::outermost(span);
 
-    let return_block = BasicBlock::new(1);
-    let mut blocks = IndexVec::with_capacity(2);
+    let set_drop_block = BasicBlock::new(0);
+    let drop_start_block = BasicBlock::new(1);
+    let drop_end_block = BasicBlock::new(2);
+    let check_drop_block = BasicBlock::new(3);
+    let check_unwind_block = BasicBlock::new(4);
+    let call_unwind_block = BasicBlock::new(5);
+    let reset_drop_block = BasicBlock::new(6);
+    let return_block = BasicBlock::new(7);
+    let mut blocks = IndexVec::with_capacity(8);
+
     let block = |blocks: &mut IndexVec<_, _>, kind| {
         blocks.push(BasicBlockData {
             statements: vec![],
@@ -236,13 +516,52 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)
             is_cleanup: false,
         })
     };
+
+    // set_drop_block
+    block(&mut blocks, TerminatorKind::Goto { target: drop_start_block });
+    // drop_start_block
+    block(&mut blocks, TerminatorKind::Goto { target: drop_end_block });
+    // drop_end_block
+    block(&mut blocks, TerminatorKind::Goto { target: check_drop_block });
+    // check_drop_block
+    block(&mut blocks, TerminatorKind::Goto { target: check_unwind_block });
+    // check_unwind_block
+    block(&mut blocks, TerminatorKind::Goto { target: call_unwind_block });
+    // call_unwind_block
+    block(&mut blocks, TerminatorKind::Goto { target: reset_drop_block });
+    // reset_drop_block
     block(&mut blocks, TerminatorKind::Goto { target: return_block });
+    // return_block
     block(&mut blocks, TerminatorKind::Return);
 
     let source = MirSource::from_instance(ty::InstanceKind::DropGlue(def_id, ty));
     let mut body =
         new_body(source, blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);
 
+    if tcx.sess.target.llvm_target.contains("thumbv7em-none-eabi")
+        || tcx.sess.target.llvm_target.contains("armv7em-none-eabi")
+    {
+        let in_drop_flag_place = init_set_drop_block(tcx, &mut body, set_drop_block, span);
+        init_check_drop_block(
+            &mut body,
+            in_drop_flag_place,
+            check_drop_block,
+            check_unwind_block,
+            return_block,
+            span,
+        );
+        init_check_unwind_block(
+            tcx,
+            &mut body,
+            check_unwind_block,
+            call_unwind_block,
+            reset_drop_block,
+            span,
+        );
+        init_call_unwind_block(tcx, &mut body, call_unwind_block, span);
+        init_reset_drop_block(tcx, &mut body, reset_drop_block, span);
+    }
+
     // The first argument (index 0), but add 1 for the return value.
     let mut dropee_ptr = Place::from(Local::new(1 + 0));
     if tcx.sess.opts.unstable_opts.mir_emit_retag {
@@ -266,7 +585,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)
             StatementKind::Retag(RetagKind::FnEntry, Box::new(dropee_ptr)),
         ];
         for s in new_statements {
-            body.basic_blocks_mut()[START_BLOCK]
+            body.basic_blocks_mut()[drop_start_block]
                 .statements
                 .push(Statement { source_info, kind: s });
         }
@@ -284,9 +603,9 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)
                 source_info,
                 dropee,
                 (),
-                return_block,
+                drop_end_block,
                 elaborate_drops::Unwind::To(resume_block),
-                START_BLOCK,
+                drop_start_block,
             );
             elaborator.patch
         };
-- 
2.39.5 (Apple Git-154)

