From c97a8117398647da481d98b84c5ffb88296e1514 Mon Sep 17 00:00:00 2001
From: Zhiyao Ma <zhiyao.ma.98@gmail.com>
Date: Wed, 11 Sep 2024 19:54:33 -0400
Subject: [PATCH] Force using segmented stacks.

---
 compiler/rustc_codegen_llvm/src/attributes.rs        | 10 ++++++++++
 compiler/rustc_codegen_ssa/src/codegen_attrs.rs      |  1 +
 compiler/rustc_feature/src/builtin_attrs.rs          |  1 +
 compiler/rustc_middle/src/middle/codegen_fn_attrs.rs |  2 ++
 compiler/rustc_span/src/symbol.rs                    |  1 +
 5 files changed, 15 insertions(+)

diff --git a/compiler/rustc_codegen_llvm/src/attributes.rs b/compiler/rustc_codegen_llvm/src/attributes.rs
index e7669470026..5f3a9edf12f 100644
--- a/compiler/rustc_codegen_llvm/src/attributes.rs
+++ b/compiler/rustc_codegen_llvm/src/attributes.rs
@@ -513,6 +513,16 @@ pub fn from_fn_attrs<'ll, 'tcx>(
         to_add.push(llvm::CreateAttrStringValue(cx.llcx, "target-features", &target_features));
     }
 
+    // Force segmented stack.
+    if cx.sess().target.llvm_target.contains("thumbv7em-none-eabi")
+      || cx.sess().target.llvm_target.contains("armv7em-none-eabi")
+      || cx.sess().target.llvm_target.contains("thumbv6m-none-eabi")
+      || cx.sess().target.llvm_target.contains("armv6m-none-eabi") {
+        if !codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SPLIT_STACK) {
+            to_add.push(llvm::CreateAttrString(cx.llcx, "split-stack"));
+        }
+    }
+
     attributes::apply_to_llfn(llfn, Function, &to_add);
 }
 
diff --git a/compiler/rustc_codegen_ssa/src/codegen_attrs.rs b/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
index bfa4c683d56..a4ceeff78e7 100644
--- a/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
+++ b/compiler/rustc_codegen_ssa/src/codegen_attrs.rs
@@ -100,6 +100,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {
 
         match name {
             sym::cold => codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD,
+            sym::no_split_stack => codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SPLIT_STACK,
             sym::rustc_allocator => codegen_fn_attrs.flags |= CodegenFnAttrFlags::ALLOCATOR,
             sym::ffi_pure => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_PURE,
             sym::ffi_const => codegen_fn_attrs.flags |= CodegenFnAttrFlags::FFI_CONST,
diff --git a/compiler/rustc_feature/src/builtin_attrs.rs b/compiler/rustc_feature/src/builtin_attrs.rs
index f8bbd27ac31..8b290e853f2 100644
--- a/compiler/rustc_feature/src/builtin_attrs.rs
+++ b/compiler/rustc_feature/src/builtin_attrs.rs
@@ -469,6 +469,7 @@ pub struct BuiltinAttribute {
     // Code generation:
     ungated!(inline, Normal, template!(Word, List: "always|never"), FutureWarnFollowing, EncodeCrossCrate::No),
     ungated!(cold, Normal, template!(Word), WarnFollowing, EncodeCrossCrate::No),
+    ungated!(no_split_stack, Normal, template!(Word), WarnFollowing, EncodeCrossCrate::No),
     ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing, EncodeCrossCrate::Yes),
     ungated!(
         target_feature, Normal, template!(List: r#"enable = "name""#),
diff --git a/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs b/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
index 3ddf889b63a..6dea5896c0b 100644
--- a/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
+++ b/compiler/rustc_middle/src/middle/codegen_fn_attrs.rs
@@ -125,6 +125,8 @@ impl CodegenFnAttrFlags: u32 {
         const ALLOCATOR_ZEROED          = 1 << 18;
         /// `#[no_builtins]`: indicates that disable implicit builtin knowledge of functions for the function.
         const NO_BUILTINS               = 1 << 19;
+        /// `#[no_split_stack]`: use contiguous stack instead of segmented stack.
+        const NO_SPLIT_STACK            = 1 << 20;
     }
 }
 rustc_data_structures::external_bitflags_debug! { CodegenFnAttrFlags }
diff --git a/compiler/rustc_span/src/symbol.rs b/compiler/rustc_span/src/symbol.rs
index 99d80eda374..401a055ec59 100644
--- a/compiler/rustc_span/src/symbol.rs
+++ b/compiler/rustc_span/src/symbol.rs
@@ -1298,6 +1298,7 @@
         no_main,
         no_mangle,
         no_sanitize,
+        no_split_stack,
         no_stack_check,
         no_start,
         no_std,
-- 
2.39.5 (Apple Git-154)

